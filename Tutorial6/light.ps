// Globals
Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

cbuffer LightBuffer
{
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

// Typedefs
struct PixelInputType
{
	float4 position : POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

// Pixel Shader
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Invert the light direction for calculations
	lightDir = -lightDirection;

	// Calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal, lightDir));

	//Determine the final amount of diffuse colour based on the diffuse colour combined with the light intensity
	color = saturate(diffuseColor * lightIntensity);

	// Multiply the texture pixel and the final diffuse color to get the final pixel color result
	color = color * textureColor;

	return color;
}